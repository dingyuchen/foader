{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/distributed-dyom/spinnaker","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"spinnaker\"\n  }, \"Spinnaker\"), mdx(\"p\", null, \"Spinnaker is a datastore.\"), mdx(\"p\", null, \"It features key-based range partitioning, 3-way replication, and a transactional get-put API with the option to choose either strong or timeline consistency on reads.\"), mdx(\"h2\", {\n    \"id\": \"limitations-master-slave-replication\"\n  }, \"Limitations Master-Slave Replication\"), mdx(\"p\", null, \"Loss of either master or slave can result in permanent data loss.\"), mdx(\"p\", null, \"For 3 replicas, more complicated failure sequences can be possible.\"), mdx(\"h2\", {\n    \"id\": \"consistency\"\n  }, \"Consistency\"), mdx(\"p\", null, \"Strong consistency\\n: guarantees that all replicas appear identical to applications\"), mdx(\"p\", null, \"Timeline consistency\\n: allows potentially stale data to be return in exchange for better performance.\"), mdx(\"p\", null, \"[\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"cap-theorem\",\n    \"title\": \"CAP Theorem\"\n  }, \"cap-theorem\"), \"]\"), mdx(\"p\", null, \"Within a single datacenter where network partitions are rar, opting for strong consistency and availability is a better design choice.\"), mdx(\"h2\", {\n    \"id\": \"data-model-and-api\"\n  }, \"Data Model and API\"), mdx(\"p\", null, \"get(key, colname, consistent)\\n: Read a column value and its version number from a row. The setting of the 'consistent' flag is used to choose the consistency level.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Setting it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" chooses strong consistency, and the latest value is always returned.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Setting it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" chooses timeline consistency, and a possibly stale value is return in exchange for better performance.\")), mdx(\"p\", null, \"put(key, colname, colvalue)\\n: Insert a column value into a row\"), mdx(\"p\", null, \"delete(key, colname)\\n: Delete a column from a row\"), mdx(\"p\", null, \"conditionalPut(key, colname, value, v)\\n: Insert a new column value into a row only if the column's current version number is equal to 'v'. Otherwise, an error is returned.\"), mdx(\"p\", null, \"conditionalDelete(key, colname, v)\\n: Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"conditionalPut\"), \" but for delete\"), mdx(\"p\", null, \"Version numbers are monotonically increasing integers that are managed by Spinnaker and exposed through its get API\"), mdx(\"h2\", {\n    \"id\": \"architecture\"\n  }, \"Architecture\"), mdx(\"p\", null, \"Each node is assigned a base key range which is replicated on the next $N - 1$ nodes.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"$N$ is a replication setting\")), mdx(\"p\", null, \"Each group of nodes involved in replicating a key range is denoted as a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cohort\"), \".\"), mdx(\"h3\", {\n    \"id\": \"node-architecture\"\n  }, \"Node Architecture\"), mdx(\"h2\", {\n    \"id\": \"replication-protocol\"\n  }, \"Replication Protocol\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"cap-theorem\"\n  }, \"CAP Theorem\"), mdx(\"p\", null, \"Among Consistency, Availability and Partition tolerance, only 2 out of 3 are possible.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"9017e8ed-7ebb-5c94-b867-b0466d717df8","fields":{"slug":"/distributed-dyom/cap-theorem","title":"CAP Theorem"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"distributed-systems\"\n  }, \"Distributed Systems\"), mdx(\"p\", null, \"#entry\"), mdx(\"h2\", {\n    \"id\": \"table-of-contents\"\n  }, \"Table of Contents\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"MapReduce\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"gfs\",\n    \"title\": \"Google File System\"\n  }, \"gfs\"), \"] - Google File System\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Raft\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"spinnaker\",\n    \"title\": \"Spinnaker\"\n  }, \"spinnaker\"), \"]\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"aurora\",\n    \"title\": \"Aurora\"\n  }, \"aurora\"), \"]\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"14f7242e-6dbb-57e6-81a6-d73cb80db295","fields":{"slug":"/distributed-dyom/distributed-dyom","title":"Distributed Systems"}}}]},"fields":{"slug":"/distributed-dyom/spinnaker","title":"Spinnaker"}}},"pageContext":{"id":"732ce9ac-1e2a-57cd-b821-c600f33efbc5"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}