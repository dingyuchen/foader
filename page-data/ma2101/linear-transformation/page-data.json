{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/ma2101/linear-transformation","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"linear-transformation\"\n  }, \"Linear Transformation\"), mdx(\"p\", null, \"Transformation is a rule that turns \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vectors\"), \" into other \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vectors\"), \".\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Linear\"), \" Transformation is a rule that also satisfies the following rules:\\n$$T(c \\\\vec u) = cT(\\\\vec u)$$\\n$$T(\\\\vec u + \\\\vec v) = T(\\\\vec u) + T(\\\\vec v)$$\"), mdx(\"h2\", {\n    \"id\": \"matrix-of-a-linear-transformation\"\n  }, \"Matrix of a Linear Transformation\"), mdx(\"p\", null, \"The usual vectors $\\\\hat i$ and $\\\\hat j$ define a square.\"), mdx(\"p\", null, \"[\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"singular-linear-transformation\",\n    \"title\": \"Singular Linear Transformation\"\n  }, \"singular-linear-transformation\"), \"]\"), mdx(\"h2\", {\n    \"id\": \"system-of-linear-equations\"\n  }, \"System of Linear Equations\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If det $M \\\\neq 0$, then there is an unique solution.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If det $M = 0$, there is probably no solution. But if there is one, then there will be many.\")), mdx(\"h2\", {\n    \"id\": \"eigenvectors-and-eigenvalues\"\n  }, \"Eigenvectors and Eigenvalues\"), mdx(\"p\", null, \"Some linear transformations do not change the direction of a vector.\"), mdx(\"p\", null, \"eg. $\\\\begin{bmatrix} 1 & 2 \", \"\\\\\", \" 2 & -2\\\\end{bmatrix}\\\\begin{bmatrix} 2 \", \"\\\\\", \" 1\\\\end{bmatrix} = \\\\begin{bmatrix} 4 \", \"\\\\\", \" 2\\\\end{bmatrix}$\"), mdx(\"p\", null, \"In general if a transformation $T$ does not change the direction of a vector $\\\\vec u$, that is \"), mdx(\"p\", null, \"$$T \\\\vec u = \\\\lambda \\\\vec u$$\"), mdx(\"p\", null, \"for some $\\\\lambda$ (scalar), then $\\\\vec u$ is called an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"eigenvector\"), \" of $T$.\\nThe scalar $\\\\lambda$ is called the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"eigenvalue\"), \" of $\\\\vec u$.\"), mdx(\"h3\", {\n    \"id\": \"finding-eigenvectors-and-eigenvalues\"\n  }, \"Finding Eigenvectors and Eigenvalues\"), mdx(\"p\", null, \"$$T \\\\vec u = \\\\lambda \\\\vec u \\\\Rightarrow (T - \\\\lambda I) \\\\vec u = \\\\vec 0$$\"), mdx(\"p\", null, \"Hence det$(T - \\\\lambda I) = 0$.\\nThis can be solved as a linear equation.\"), mdx(\"p\", null, \"In general, there are $n$ answers for $n \\\\times n$ matrices. (but not always!)\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Important note that eigenvectors are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not unique\"), \". (A scalar multiple of an eigenvector is also an eigenvector)\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"singular-linear-transformation\"\n  }, \"Singular Linear Transformation\"), mdx(\"p\", null, \"Singular Linear Transformation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Maps 2 different vectors to one vectors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Destroys all of the vectors in at least one direction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"loses all information associated with those directions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Satisfies det $T = 0$ \")), mdx(\"p\", null, \"Conversely, a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"non-singular\"), \" transformation never maps 2 vectors to one.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"6d2f8e93-49f6-5876-8767-77e13937646d","fields":{"slug":"/ma2101/singular-linear-transformation","title":"Singular Linear Transformation"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"linear-algebra-2\"\n  }, \"Linear Algebra 2\"), mdx(\"p\", null, \"#entry\"), mdx(\"h2\", {\n    \"id\": \"textbook\"\n  }, \"Textbook\"), mdx(\"p\", null, \"Linear Algebra Done Right - Sheldon Axler\"), mdx(\"h2\", {\n    \"id\": \"assessment\"\n  }, \"Assessment\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Test\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Weightage\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Online Test\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"30%\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Online Test\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"35%\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Online Test\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"35%\")))), mdx(\"h2\", {\n    \"id\": \"content\"\n  }, \"Content\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"linear-transformation\",\n    \"title\": \"Linear Transformation\"\n  }, \"linear-transformation\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"trace-of-a-matrix\",\n    \"title\": \"Trace of a Matrix\"\n  }, \"trace-of-a-matrix\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"vector-space\",\n    \"title\": \"Vector Space\"\n  }, \"vector-space\"), \"]\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"0a4b0a7f-5828-5219-9fd3-4d4c7579904f","fields":{"slug":"/ma2101/module-ma2101","title":"Linear Algebra 2"}}}]},"fields":{"slug":"/ma2101/linear-transformation","title":"Linear Transformation"}}},"pageContext":{"id":"381571d6-5b70-5c5f-8252-150c98ca4190"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}