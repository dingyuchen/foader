{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/cs5330/quicksort","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"quicksort\"\n  }, \"Quicksort\"), mdx(\"p\", null, \"#algo\"), mdx(\"p\", null, \"Similar to merge sort, pick a random pivot.\"), mdx(\"p\", null, \"Ideally, if the picking is good, we get amortized $O(n \\\\log n)$ runtime.\"), mdx(\"p\", null, \"However, in the worst possible case, we end up with $O(n^2)$ runtime if each pivot is exactly the smallest or largest unsorted element every time.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"randomized-algorithms-week-1\"\n  }, \"Randomized Algorithms Week 1\"), mdx(\"h2\", {\n    \"id\": \"intuitions-about-randomness\"\n  }, \"Intuitions about Randomness\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Breaks down some pathological inputs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"eg Jiggling\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Makes some algorithms faster\")), mdx(\"h2\", {\n    \"id\": \"issues-with-analysis\"\n  }, \"Issues with Analysis\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How do you measure the running time when it depends on random choices made by the algorithm?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Expected / average runtime\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"High probability bound on the running time\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How do you implement a random sampling?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How much randomness is needed?\")))), mdx(\"h2\", {\n    \"id\": \"examples-of-random-algorithms\"\n  }, \"Examples of Random Algorithms\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[[]] - \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/quicksort\",\n    \"title\": \"quicksort\"\n  }), \"[[quicksort]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"treaps\",\n    \"title\": \"Treaps\"\n  }), \"treaps\"), \"] - A probabilistic binary tree\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"8b4bc108-1cd5-518f-a516-b2eef35ee3e1","fields":{"slug":"/cs5330/week1-lect","title":"Randomized Algorithms Week 1"}}}]},"fields":{"slug":"/cs5330/quicksort","title":"Quicksort"}}},"pageContext":{"id":"00d086e6-0460-5f4c-925f-4c72758a0bcf"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}